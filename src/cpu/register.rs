pub const REGISTERS_COUNT: usize = 32;

pub enum Register {
    X0,
    X1,
    X2,
    X3,
    X4,
    X5,
    X6,
    X7,
    X8,
    X9,
    X10,
    X11,
    X12,
    X13,
    X14,
    X15,
    X16,
    X17,
    X18,
    X19,
    X20,
    X21,
    X22,
    X23,
    X24,
    X25,
    X26,
    X27,
    X28,
    X29,
    X30,
    X31,
}

// TODO: better way?
impl Register {
    // Enum to string
	fn etos(&self) -> String {
		match *self {
            Register::X0 => String::from("x0"),
            Register::X1 => String::from("x1"),
            Register::X2 => String::from("x2"),
            Register::X3 => String::from("x3"),
            Register::X4 => String::from("x4"),
            Register::X5 => String::from("x5"),
            Register::X6 => String::from("x6"),
            Register::X7 => String::from("x7"),
            Register::X8 => String::from("x8"),
            Register::X9 => String::from("x9"),
            Register::X10 => String::from("x10"),
            Register::X11 => String::from("x11"),
            Register::X12 => String::from("x12"),
            Register::X13 => String::from("x13"),
            Register::X14 => String::from("x14"),
            Register::X15 => String::from("x15"),
            Register::X16 => String::from("x16"),
            Register::X17 => String::from("x17"),
            Register::X18 => String::from("x18"),
            Register::X19 => String::from("x19"),
            Register::X20 => String::from("x20"),
            Register::X21 => String::from("x21"),
            Register::X22 => String::from("x22"),
            Register::X23 => String::from("x23"),
            Register::X24 => String::from("x24"),
            Register::X25 => String::from("x25"),
            Register::X26 => String::from("x26"),
            Register::X27 => String::from("x27"),
            Register::X28 => String::from("x28"),
            Register::X29 => String::from("x29"),
            Register::X30 => String::from("x30"),
            Register::X31 => String::from("x31"),
        }
    }

    // int to string
	pub fn itos(i: usize) -> String {
		match i {
            0 => String::from("x0"),
            1 => String::from("x1"),
            2 => String::from("x2"),
            3 => String::from("x3"),
            4 => String::from("x4"),
            5 => String::from("x5"),
            6 => String::from("x6"),
            7 => String::from("x7"),
            8 => String::from("x8"),
            9 => String::from("x9"),
            10 => String::from("x10"),
            11 => String::from("x11"),
            12 => String::from("x12"),
            13 => String::from("x13"),
            14 => String::from("x14"),
            15 => String::from("x15"),
            16 => String::from("x16"),
            17 => String::from("x17"),
            18 => String::from("x18"),
            19 => String::from("x19"),
            20 => String::from("x20"),
            21 => String::from("x21"),
            22 => String::from("x22"),
            23 => String::from("x23"),
            24 => String::from("x24"),
            25 => String::from("x25"),
            26 => String::from("x26"),
            27 => String::from("x27"),
            28 => String::from("x28"),
            29 => String::from("x29"),
            30 => String::from("x30"),
            31 => String::from("x31"),
            _ => String::from("unknown register number")
        }
    }
}

